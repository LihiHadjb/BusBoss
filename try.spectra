import "DwyerPatterns.spectra"

spec BusBoss_sprint02

define NUM_BUSSES := 4; // 2 for each line (A and B) + 2 reserve
define MAX_STATIONS_TO_GAS_STATION := 10;
define MAX_UNSTOPPED_STATIONS := 4;
define NUM_STATIONS := 6;
define NUM_LINES := 2;
define NUM_ROUNDS_TO_FREE_RESERVE_BUS := 3;

// ____scenarios_____
//TODO: If it is raining, than the bus should wait 2 steps in each station it stops at in order to help passengers get settled
env boolean isRaining;

//Lines
define A := 0;
define B := 1;

sys boolean[NUM_LINES] extraBusSentLine;
sys boolean[NUM_LINES] needExtraBusForLine;

//_______Stations________

env boolean [NUM_STATIONS] arePassengersWaiting;

//Local Stations
define a1 := 0;
define a2 := 1;

define b1 := 2;
define b2 := 3;

//Other Stations
define main_station := 4;
define gas_station := 5;

// ______Routes________

// Routes lengths
define line_A_length := 3;
define line_B_length := 3;
define a1_to_gas_station_length := 2;
define a2_to_gas_station_length := 4;
define b1_to_gas_station_length := 3;
define b2_to_gas_station_length := 2;
define main_station_to_gas_station_length := 2;

// Routes
define line_A_route[line_A_length] := {main_station, a1, a2};
define line_B_route[line_B_length] := {main_station, b1, b2};

// Routes from every station to gas_station
define a1_to_gas_station_route[a1_to_gas_station_length] := {a1, gas_station};
define a2_to_gas_station_route[a2_to_gas_station_length] := {a2, main_station, a1, gas_station};
define b1_to_gas_station_route[b1_to_gas_station_length] := {b1, b2, gas_station};
define b2_to_gas_station_route[b2_to_gas_station_length] := {b2, gas_station};
define main_station_to_gas_station_route[main_station_to_gas_station_length] := {main_station, gas_station};

//_______Busses________

type Bus = Int(0..(NUM_BUSSES - 1));

env boolean [NUM_BUSSES] isBusFull;
env boolean[NUM_BUSSES] isStopPressed;
env boolean[NUM_BUSSES] atDestinationStation;
//env boolean [NUM_BUSSES] arePassengersWaitingInNextStation;

sys Int(0..(NUM_LINES - 1))[NUM_BUSSES] lineOfBus;
sys boolean[NUM_BUSSES] inUse;

sys Int(0..(NUM_STATIONS - 1))[NUM_BUSSES] destinationStation;
sys boolean[NUM_BUSSES] stopAtNextStation;
sys boolean[NUM_BUSSES] shouldGoToGasStation;
sys boolean[NUM_BUSSES] shouldStop;

predicate atSpecificDestinationStation(Bus bus, Int(0..(NUM_STATIONS - 1)) station):
	atDestinationStation[bus] & (destinationStation[bus] = station);

  
predicate atGasStation(Bus bus):
	atDestinationStation[bus] & (destinationStation[bus] = gas_station);	
	
counter numOfStopsPassedBus0 (0..MAX_STATIONS_TO_GAS_STATION){
	numOfStopsPassedBus1 = 0;
	inc: atDestinationStation[0] & !atGasStation(0);
	reset: atGasStation(0);
	overflow: false;
}

counter numOfStopsPassedBus1 (0..MAX_STATIONS_TO_GAS_STATION){
	numOfStopsPassedBus1 = 0;
	inc: atDestinationStation[1] & !atGasStation(1);
	reset: atGasStation(1);
	overflow: false;
}

counter numOfStopsPassedBus2 (0..MAX_STATIONS_TO_GAS_STATION){
	numOfStopsPassedBus2 = 0;
	inc: atDestinationStation[2] & !atGasStation(2);
	reset: atGasStation(2);
	overflow: false;
}

counter numOfStopsPassedBus3 (0..MAX_STATIONS_TO_GAS_STATION){
	numOfStopsPassedBus3 = 0;
	inc: atDestinationStation[3] & !atGasStation(3);
	reset: atGasStation(3);
	overflow: false;
}



predicate atStationAndPassengersDidNotHaveSeats(Bus bus):
	exists station in Int(0..(NUM_STATIONS-1)). (atDestinationStation[bus] & destinationStation[bus] = station) & arePassengersWaiting[station] & isBusFull[bus];

counter unstoppedStationsBus0 (0..MAX_UNSTOPPED_STATIONS){
	unstoppedStationsBus0 = 0;
	inc: atStationAndPassengersDidNotHaveSeats(0);
	reset: extraBusSentLine[lineOfBus[0]] | !inUse[0];
	overflow: keep;
}

counter unstoppedStationsBus1 (0..MAX_UNSTOPPED_STATIONS){
	unstoppedStationsBus1 = 0;
	inc: atStationAndPassengersDidNotHaveSeats(1);
	reset: extraBusSentLine[lineOfBus[1]] | !inUse[1];
	overflow: keep;
}

counter unstoppedStationsBus2 (0..MAX_UNSTOPPED_STATIONS){
	unstoppedStationsBus2 = 0;
	inc: atStationAndPassengersDidNotHaveSeats(2);
	reset: extraBusSentLine[lineOfBus[2]] | !inUse[2];
	overflow: keep;
}

counter unstoppedStationsBus3 (0..MAX_UNSTOPPED_STATIONS){
	unstoppedStationsBus3 = 0;
	inc: atStationAndPassengersDidNotHaveSeats(3);
	reset: extraBusSentLine[lineOfBus[3]] | !inUse[3];
	overflow: keep;	
}


// Counters for number of stations for every reserve bus
counter numberStationsOfReserveBus2 (0..NUM_ROUNDS_TO_FREE_RESERVE_BUS){
	numberStationsOfReserveBus2 = 0;
	inc: inUse[2] & atSpecificDestinationStation(2, 4); // 4 is main_station
	reset: !inUse[2];
	overflow: keep;
}

counter numberStationsOfReserveBus3 (0..NUM_ROUNDS_TO_FREE_RESERVE_BUS){
	numberStationsOfReserveBus3 = 0;
	inc: inUse[3] & atSpecificDestinationStation(3, 4); // 4 is main_station
	reset: !inUse[3];
	overflow: keep;
}




